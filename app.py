import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import asyncio
import time

API_TOKEN = '7516352227:AAHv1RFI-aNlRZJJdS1nS9fopUCRZ40dfIk'
DISCOGS_API_KEY = 'EuUMoQJolWDmwKjWFQYmDQIYDciYeWuwpjLGUBkA'
YOUTUBE_API_KEY = 'AIzaSyBvGSDRqsqbCX2V_DdzzeKbgjjropyEF_0'
CC_API_URL = 'https://api.openverse.org/v1/audio/'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Discogs API
def search_discogs(track_name):
    try:
        url = f"https://api.discogs.com/database/search?q={track_name}&token={DISCOGS_API_KEY}"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            return data['results'][:3]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        else:
            logging.error(f"üö´ –û—à–∏–±–∫–∞ Discogs API: {response.status_code}")
            return None
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Discogs API: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ YouTube Data API
def search_youtube(track_name):
    try:
        url = f"https://www.googleapis.com/youtube/v3/search?part=snippet&q={track_name}&key={YOUTUBE_API_KEY}"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            return data['items'][:3]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ –≤–∏–¥–µ–æ
        else:
            logging.error(f"üö´ –û—à–∏–±–∫–∞ YouTube API: {response.status_code}")
            return None
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ YouTube API: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Openverse (Creative Commons) API
def search_creative_commons(track_name):
    try:
        params = {'q': track_name, 'fields': 'title,url,creator'}
        response = requests.get(CC_API_URL, params=params)

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.info(f"–û—Ç–≤–µ—Ç Openverse API: {response.status_code}, –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")

        if response.status_code == 200:
            data = response.json()
            return data['results'][:3]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        else:
            logging.error(f"üö´ –û—à–∏–±–∫–∞ Openverse API: {response.status_code}, Response: {response.text}")
            return None
    except ValueError as ve:
        logging.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç Openverse API: {ve}, Response: {response.text}")
        return None
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Openverse API: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Discogs
def format_discogs_results(results):
    formatted = ""
    if results:
        for result in results:
            formatted += f"üéµ {result.get('title')} by {result.get('artist')}\n"
            formatted += f"üîó Link: {result.get('uri')}\n\n"
        formatted += "‚ÑπÔ∏è –≠—Ç–∏ –ø–µ—Å–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞—â–∏—â–µ–Ω—ã –∞–≤—Ç–æ—Ä—Å–∫–∏–º –ø—Ä–∞–≤–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏—é –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.\n\n"
    else:
        formatted = "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ Discogs.\n"
    return formatted

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ YouTube
def format_youtube_results(results):
    formatted = ""
    if results:
        for result in results:
            if result['id']['kind'] == 'youtube#video':
                formatted += f"üé• {result['snippet']['title']}\n"
                formatted += f"üì∫ Channel: {result['snippet']['channelTitle']}\n"
                formatted += f"üîó Link: https://www.youtube.com/watch?v={result['id']['videoId']}\n\n"
        formatted += "‚ö†Ô∏è –ù–∞ YouTube –º–æ–≥—É—Ç –±—ã—Ç—å –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –∞–≤—Ç–æ—Ä—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.\n\n"
    else:
        formatted = "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ YouTube.\n"
    return formatted

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Openverse (Creative Commons)
def format_cc_results(results):
    formatted = ""
    if results:
        for result in results:
            formatted += f"üìú {result['title']} by {result['creator']}\n"
            formatted += f"üîó Link: {result['url']}\n\n"
        formatted += "‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ Openverse —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –ª–∏—Ü–µ–Ω–∑–∏–µ–π. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–≤—Ç–æ—Ä–∞!\n\n"
    else:
        formatted = "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Openverse (Creative Commons).\n"
    return formatted

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è
def analyze_results(discogs_results, youtube_results, cc_results):
    analysis = ""

    if discogs_results:
        analysis += "üö´ –ü–µ—Å–Ω—è –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Discogs, —á—Ç–æ –º–æ–∂–µ—Ç —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ–≤–∞—Ç—å –æ –Ω–∞–ª–∏—á–∏–∏ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.\n\n"
    else:
        analysis += "‚úÖ –ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Discogs. –í–µ—Ä–æ—è—Ç–Ω–æ, –æ–Ω–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ –∑–∞—â–∏—â—ë–Ω–Ω–∞—è.\n\n"

    if cc_results:
        analysis += "‚úÖ –°–£–ü–ï–†! –ü–µ—Å–Ω—è –Ω–∞–π–¥–µ–Ω–∞ –≤ Openverse (Creative Commons) —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –ª–∏—Ü–µ–Ω–∑–∏–µ–π. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–æ–±–ª—é–¥–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–∫–∞–∑–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞).\n\n"
    else:
        analysis += "‚ùå –ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Openverse (Creative Commons), –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –Ω–µ –∏–º–µ–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏.\n\n"

    if youtube_results:
        analysis += "‚ö†Ô∏è –ü–µ—Å–Ω—è –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ YouTube. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∞–≤—Ç–æ—Ä—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –≤–∞—à–µ–º —Å–ª—É—á–∞–µ.\n\n"
    else:
        analysis += "‚ùå –ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ YouTube.\n\n"

    return analysis

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def search_track(message: types.Message):
    track_name = message.text
    await message.reply(f"üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Å–Ω–µ \"{track_name}\"")

    # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Discogs
    discogs_results = search_discogs(track_name)
    await message.reply(format_discogs_results(discogs_results))

    # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ YouTube
    youtube_results = search_youtube(track_name)
    await message.reply(format_youtube_results(youtube_results))

    # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Openverse (Creative Commons)
    cc_results = search_creative_commons(track_name)
    await message.reply(format_cc_results(cc_results))

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
    conclusion = analyze_results(discogs_results, youtube_results, cc_results)
    await message.reply(f"üìù –ó–∞–∫–ª—é—á–µ–Ω–∏–µ:\n\n {conclusion}")

if __name__ == '__main__':
    try:
        loop = asyncio.get_event_loop()
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        time.sleep(5)
